defmodule Metex.Worker do
  use GenServer

  ## Client API

  def start_link(opts \\ []) do
    GenServer.start_link(__MODULE__, :ok, opts)
  end

  def get_temperature(pid, location) do
    GenServer.call(pid, { :location, location })
  end

  ## Server Callbacks

  def init(:ok) do
    { :ok, %{} }
  end

  def handle_call({ :location, location }, _from, state) do
    case temperature_of(location) do
      { :ok, temp } ->
        new_stats = update_stats(stats, location)
        { :reply, "#{temp}Â°C", new_stats }
      _ ->
        { :reply, :error, stats }
    end
  end

  ## Helper Functions

  defp temperature_of(location) do
    url_for(location)
    |> HTTPoison.get
    |> parse_response
  end

  defp url_for(location) do
    "http://api.openweathermap.org/data/2.5/weather?q=#{URI.encode(location)}&appid=#{api_key()}"
  end

  defp parse_response({ :ok, %HTTPoison.Response{ body: body, status_code: 200 } }) do
    body
    |> JSON.decode!
    |> compute_temperature
  end
  defp parse_response(_), do: :error

  defp compute_temperature(json) do
    try do
      temp = (json["main"]["temp"] - 273.15) |> Float.round(1)
      { :ok, temp }
    rescue
      _ -> :error
    end
  end

  defp update_stats(old_stats, location) do
    { _, stats } = Map.get_and_update(old_stats, location, fn count ->
      { count, (count || 0) + 1 }
    end)

    stats
  end

  defp api_key, do: Application.get_env(:metex, :open_weather_map)[:api_key]
end
